on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      # - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      # - '.github/workflows/**'

jobs:
  # initkube:
    # defaults:
      # run:
        # working-directory: depkube
    # name: Terraform
    # runs-on: ubuntu-latest
    # defaults:
      # run:
        # shell: bash

    # steps:
      # - name: Checkout
        # uses: actions/checkout@v2

      # - name: Setup Terraform
        # uses: hashicorp/setup-terraform@v1
        # with:
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # - name: Terraform Init
        # run: terraform init

      # - name: Terraform Format
        # run: terraform fmt -check

      # - name: Terraform Plan
        # run: terraform plan

      # - name: Terraform Apply
    # #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        # run: terraform apply -auto-approve

  # pytest:
    # # needs: [flake8-lint]
    # runs-on: ubuntu-latest

    # steps:
    # - uses: actions/checkout@v2
    # - name: Set up Python 3.9
      # uses: actions/setup-python@v2
      # with:
        # python-version: 3.9
    # - name: Install dependencies
      # run: |
        # python -m pip install --upgrade pip
        # pip install pytest
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Test with pytest
      # run: |
        # pytest


  # pylint:
    # # needs: pytest
    # runs-on: ubuntu-latest
    # steps:
    # - uses: actions/checkout@v2
    # - name: Set up Python 3.9
      # uses: actions/setup-python@v2
      # with:
        # python-version: 3.9
    # - name: Install dependencies
      # run: |
        # python -m pip install --upgrade pip
        # pip install pylint 
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with pylint
      # run: |
        # pylint --exit-zero $(ls -R | grep .py$ | xargs)

 #========================ADD build test HERE ===================================
 #========================AND MAY BE BANDIT ===================================

   # push_to_Docker_Hub:
      # name: Push Images to DockerHub
      # # The type of runner that the job will run on
      # runs-on: ubuntu-latest
      # # build docker image and push to docker hub
      # # only if the app build and test successfully
      # needs: [build_test]

      # steps:
        # - name: checkout repo
          # uses: actions/checkout@v2

        # - name: Set up QEMU
          # uses: docker/setup-qemu-action@v1
      
        # - name: Set up Docker Buildx
          # uses: docker/setup-buildx-action@v1

        # - name: Login to DockerHub
          # uses: docker/login-action@v1
          # with:
            # username: ${{ secrets.DOCKERHUB_USERNAME }}
            # password: ${{ secrets.DOCKERHUB_TOKEN }}
      
        # - name: Build and push
          # uses: docker/build-push-action@v2
          # with:
            # context: ./
            # file: ./Dockerfile
            # push: true
            # tags: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo:latest
          
        # - name: Run the image in a container
          # uses: addnab/docker-run-action@v3
          # with:
            # image: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo:latest
            # run: |
              # echo "runing the docker image"
              # echo "Testing the nodejs  app endpoints"
              # echo ${{ steps.docker_build.outputs.digest }}

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        project_id: ${{ secrets.GCP_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCP_CREDENTIALS }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

  # deploy_to_google_cloud:
    # name: Deploy to GCP
    # runs-on: ubuntu-latest
    # # needs: [deploy_to_heroku]
    # steps:
      # - name: checkout repo
        # uses: actions/checkout@v2

      # # Setup gcloud CLI
      # - name: setup gcloud CLI
        # uses: google-github-actions/setup-gcloud@master
        # with:
          # project_id: ${{ secrets.GCP_PROJECT }}
          # # this is the json key of the service account created on the project
          # service_account_key: ${{ secrets.GCP_CREDENTIALS }}  
          # export_default_credentials: true

      # # Deploy the app using kubernetes (deploy.yml)
      # - name: Deploy
        # # To run kubectl commands against a cluster created in Cloud Console, 
        # # from another computer, or by another member of the project, 
        # # you need to generate a kubeconfig entry in your environment.
        # # The rolling deployment is the standard default deployment to Kubernetes. 
        # # It works by slowly, one by one, replacing pods of the previous version of 
        # # your application with pods of the new version without any cluster downtime
        # run: |
          # gcloud config set compute/region ${{ secrets.GKE_ZONE }} 
          # # gcloud config set compute/zone ${{ secrets.GKE_ZONE }}a
          # gcloud container clusters get-credentials py-gke-cluster --region ${{ secrets.GKE_ZONE }}a
          # envsubst < kube.yml
          # envsubst < kube.yml | kubectl apply -f -
          # kubectl rollout restart deployment/py-app
          # kubectl rollout status -w deployment/py-app
          # kubectl get all
