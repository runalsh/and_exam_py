on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      # - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      # - '.github/workflows/**'


jobs:
  initkube:
    defaults:
      run:
        working-directory: deployk8s
        shell: bash
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        # with:
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  pytest:
    needs: initkube
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest


  pylint:
    needs: pytest
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with pylint
      run: |
        pylint --exit-zero $(ls -R | grep .py$ | xargs)

 # #========================ADD build test HERE ===================================
 
 # #========================AND MAY BE BANDIT ===================================


  dockerimagepush:
    needs: pylint
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        project_id: ${{ secrets.GCP_PROJECT }}

    - run: |-
        gcloud --quiet auth configure-docker

    # # Get the GKE credentials so we can deploy to the cluster
    # - uses: google-github-actions/get-gke-credentials@v0.2.1
      # with:
        # cluster_name: pypypypy-cluster # ${{ env.GKE_CLUSTER }}
        # location: europe-central2-a # ${{ env.GKE_ZONE }}
        # credentials: ${{ secrets.GCP_CREDENTIALS }}

    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/dark-caldron-337608/py-app:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    - name: Publish
      run: |-
        docker push "gcr.io/${{ secrets.GCP_PROJECT }}/py-app:$GITHUB_SHA"

  # deploykube:
    # name: Deploy to GCP
    # runs-on: ubuntu-latest
    # defaults:
      # run:
        # working-directory: deployk8s
        # shell: bash 
    # # needs: dockerimagepush
    # steps:
      # - name: checkout repo
        # uses: actions/checkout@v2

      # # Setup gcloud CLI
      # - name: setup gcloud CLI
        # uses: google-github-actions/setup-gcloud@master
        # with:
          # project_id: ${{ secrets.GCP_PROJECT }}
          # # this is the json key of the service account created on the project
          # service_account_key: ${{ secrets.GCP_CREDENTIALS }}  
          # export_default_credentials: true

      # # Deploy the app using kubernetes (deploy.yml)
      # - name: Deploy
        # run: |
          # gcloud config set compute/region ${{ secrets.GKE_ZONE }} 
          # # gcloud config set compute/zone ${{ secrets.GKE_ZONE }}a
          # gcloud container clusters get-credentials py-gke-cluster --region ${{secrets.GKE_ZONE}} #-a  нужна ли тут a а вдруг нет и просто зона
          # envsubst < kube.yml
          # envsubst < kube.yml | kubectl apply -f -
          # kubectl rollout restart deployment/py-app
          # kubectl rollout status -w deployment/py-app
          # kubectl get all
